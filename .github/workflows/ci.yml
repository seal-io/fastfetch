name: CI

on:
  - push
  - pull_request

jobs:
  windows-aarch64:
    name: Windows-aarch64
    runs-on: windows-arm64
    permissions:
      security-events: write
      contents: read
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        id: msys2
        with:
          msystem: CLANGARM64
          cache: false
          update: false

      - name: print msys version
        run: uname -a

      - name: Use `pacman.exe` from https://github.com/msys2/MSYS2-packages/pull/4583
        shell: powershell
        run: |
          $msys2Path = "${{ steps.msys2.outputs.msys2-location }}"
          Write-Output "MSYS2 path: $msys2Path"

          $pacmanTmpDir = Join-Path $msys2Path "tmp/pacman"
          $pacmanPath = Join-Path $msys2Path "usr/bin/pacman.exe"
          Write-Output "Checking pacman.exe at $pacmanPath"
          if (Test-Path $pacmanPath) {
            Get-ChildItem -Path $pacmanPath
          } else {
            Write-Output "pacman.exe does not exist at $pacmanPath"
          }
          
          $name = "MSYS-packages"
          $zipPath = Join-Path $msys2Path "tmp/$name.zip"
          $extractPath = Join-Path $msys2Path "tmp/$name"
          Write-Output $name
          Invoke-WebRequest -Uri "https://github.com/aiwantaozi/MSYS2-packages/releases/download/0.0.1/MSYS-packages.zip" -OutFile "$zipPath"
          Expand-Archive -Path "$zipPath" -DestinationPath "$extractPath"

          Write-Output "Finding pacman package"
          $pacmanPackage = Get-ChildItem -Path $extractPath -Filter "pacman-*.pkg.tar*" | Select-Object -First 1

          if ($null -eq $pacmanPackage) {
            Write-Output "No pacman package found"
            exit 1
          } else {
            Write-Output "Found pacman package: $pacmanPackage"
          }
          
          
          Write-Output "Extracting pacman.exe from $pacmanPackage"
          New-Item -ItemType Directory -Path $pacmanTmpDir -Force
          tar -xvf $pacmanPackage.FullName -C $pacmanTmpDir usr/bin/pacman.exe
          
          Write-Output "Copying pacman.exe to $pacmanPath"
          Copy-Item (Join-Path $pacmanTmpDir "usr/bin/pacman.exe") -Destination $pacmanPath -Force

          (Get-Content "$msys2Path\etc\pacman.conf") -replace '^\(# *\)\?\(IgnorePkg *=.*\)', '$2 pacman' | Set-Content (Join-Path $msys2Path "etc/pacman.conf")
          Get-ChildItem -Path $pacmanPath

      - name: Update package database with arm64 entries
        run: pacman -Sy
        
      - name: Install packages
        run: |
          pacman -S --noconfirm git mingw-w64-clang-aarch64-7zip -v
          pacman -S --noconfirm mingw-w64-clang-aarch64-cmake mingw-w64-clang-aarch64-toolchain -v
          pacman -S --noconfirm mingw-w64-clang-aarch64-vulkan-loader mingw-w64-clang-aarch64-vulkan-headers -v
          pacman -S --noconfirm mingw-w64-clang-aarch64-opencl-icd mingw-w64-clang-aarch64-opencl-headers -v
          pacman -S --noconfirm mingw-w64-clang-aarch64-cppwinrt mingw-w64-clang-aarch64-imagemagick -v

      - name: configure project
        run: env PKG_CONFIG_PATH=/clangarm64/lib/pkgconfig/:$PKG_CONFIG_PATH cmake -DSET_TWEAK=Off -DBUILD_TESTS=On .

      - name: build project
        run: cmake --build . --verbose -j4

      - name: copy necessary dlls
        run: cp /clangarm64/bin/{OpenCL,vulkan-1}.dll .

      - name: download amd_ags
        run: curl -LO https://github.com/GPUOpen-LibrariesAndSDKs/AGS_SDK/raw/master/ags_lib/lib/amd_ags_x64.dll

      - name: list features
        run: ./fastfetch --list-features

      - name: run fastfetch
        run: time ./fastfetch -c presets/ci.jsonc --stat false

      - name: run fastfetch --format json
        run: time ./fastfetch -c presets/ci.jsonc --format json

      - name: run flashfetch
        run: time ./flashfetch

      - name: print dependencies
        run: ldd fastfetch

      - name: run tests
        run: ctest

      - name: create zip archive
        run: 7z a -tzip -mx9 -bd -y fastfetch-windows-aarch64.zip LICENSE *.dll fastfetch.exe flashfetch.exe presets

      - name: create 7z archive
        run: 7z a -t7z -mx9 -bd -y fastfetch-windows-aarch64.7z LICENSE *.dll fastfetch.exe flashfetch.exe presets

      - name: upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: fastfetch-windows-aarch64
          path: ./fastfetch-windows-aarch64.*
  release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    name: Release
    runs-on: ubuntu-latest
    needs:
      - windows-aarch64
    permissions:
      contents: write
    steps:
      - name: download artifacts
        uses: actions/download-artifact@v4

      - name: create release
        uses: ncipollo/release-action@v1
        with:
          tag: 2.25.0
          commit: ${{ github.sha }}
          artifactErrorsFailBuild: true
          artifacts: fastfetch-*/fastfetch-*
          body: "Please refer to [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/2.25.0/CHANGELOG.md) for details."

      - name: download source tarballs
        run: |
          for i in 1 2 3 4 5; do curl -L --remote-name-all --output-dir fastfetch-source --create-dirs https://github.com/${{ github.repository }}/archive/refs/tags/2.25.0.{tar.gz,zip} && break || sleep 5; done
          ls fastfetch-*/*

